import sys
from PyQt5.uic import loadUi
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QDialog,QMainWindow,QFileDialog, QApplication, QWidget,QLabel,QPushButton
from matplotlib.widgets import Widget
from regex import W
from predict import predict,THRESHOLD, ID_TO_CLASS_MAP
from pathlib import Path
from PyQt5.QtGui import QPixmap
import os
import shutil


# Model class which call fnlModel.ui and some funcitonality is given in that to browse file and call the model
class Model(QMainWindow):
    def __init__(self):
        super(Model, self).__init__()
        loadUi('fnlModel.ui',self)
        self.newbtn.hide()
        self.setWindowTitle("Image")
        self.setGeometry(25, 575, 400, 300)
        self.label = QLabel(self)
        self.pixmap = QPixmap('iitk_2.png')
        self.label.setPixmap(self.pixmap)
        self.label.resize(self.pixmap.width(), self.pixmap.height())
        self.show()

        self.selectfile.clicked.connect(self.browsefile)
        
# funtion to browse the binary file
    def browsefile(self):
        self.myoutput.setStyleSheet("display:none")
        self.myoutput.setText("")
        self.output.setText('')
        self.output.setStyleSheet("display:none")
        self.filepath.setText(QFileDialog.getOpenFileName()[0])
    
        self.newbtn.hide()
        self.check.show()
        self.check.setStyleSheet("background-color : #7ecc49;border-radius : 25px;color : #fff")
        self.check.setText("Check")
        self.check.clicked.connect(self.call_to_model)
        
#funtion to move the file to Qurantine the files
    def make_Quarantine(self):
        name = self.filepath.text()
        shutil.move(name,os.path.join("Quarantine_files", os.path.basename(name)))
        self.myoutput.setStyleSheet("display:block")
        self.myoutput.setText("Successfully Quarantined ...!")

# function to call the model
    def call_to_model(self):
        file_name = self.filepath.text()
        pred_class, pred_prob = predict(Path(file_name))
        
        if pred_prob > THRESHOLD:
            self.output.setText('')
            self.output.setStyleSheet("display:block")
            self.output.setStyleSheet("background-color: #fff;border-radius:20px;color:red")
            self.output.setText('Given File is predicted {0} Malware with probability {1:.2}'.format(ID_TO_CLASS_MAP[pred_class], pred_prob))
            self.check.hide()
            self.newbtn.show()
            self.newbtn.setStyleSheet("background-color : #7ecc49;border-radius : 25px;color : #fff")
            self.newbtn.setText("Quarantine It...!")
            self.newbtn.clicked.connect(self.make_Quarantine)
        

        else:
            self.output.setText('')
            self.output.setStyleSheet("display:block")
            self.output.setStyleSheet("background-color: #fff;border-radius:20px;color:green")
            self.output.setText('It is not a Malware')
            self.myoutput.setText("")





# This is the main place where flow of execution start
app = QApplication(sys.argv)
# Call the UI
model = Model()
widget = QtWidgets.QStackedWidget()
widget.addWidget(model)
widget.setFixedHeight(800)
widget.setFixedWidth(1200)
widget.show()
#will show the execution on terminal
try:
    sys.exit(app.exec_())
except:
    print("Exiting")
